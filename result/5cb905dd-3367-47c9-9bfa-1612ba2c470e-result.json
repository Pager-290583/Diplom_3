{"name": "После оформления заказа его номер появляется в разделе В работе", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=122.0.6261.112)\nStacktrace:\n0   chromedriver                        0x000000010047c508 chromedriver + 3966216\n1   chromedriver                        0x0000000100474a94 chromedriver + 3934868\n2   chromedriver                        0x00000001000f7da0 chromedriver + 277920\n3   chromedriver                        0x0000000100139fa8 chromedriver + 548776\n4   chromedriver                        0x0000000100172bf0 chromedriver + 781296\n5   chromedriver                        0x000000010012efb0 chromedriver + 503728\n6   chromedriver                        0x000000010012fa28 chromedriver + 506408\n7   chromedriver                        0x00000001004416f0 chromedriver + 3725040\n8   chromedriver                        0x0000000100445be4 chromedriver + 3742692\n9   chromedriver                        0x000000010042a1d8 chromedriver + 3629528\n10  chromedriver                        0x00000001004466e0 chromedriver + 3745504\n11  chromedriver                        0x000000010041d550 chromedriver + 3577168\n12  chromedriver                        0x0000000100464f40 chromedriver + 3870528\n13  chromedriver                        0x00000001004650e4 chromedriver + 3870948\n14  chromedriver                        0x0000000100474704 chromedriver + 3933956\n15  libsystem_pthread.dylib             0x00000001891fe034 _pthread_start + 136\n16  libsystem_pthread.dylib             0x00000001891f8e3c thread_start + 8", "trace": "self = <test_feed_order.TestFeedOrder object at 0x10238c340>, app = <application.Application object at 0x1024b9f40>, user_data = <test_date.user_data.UserData object at 0x1024b6b20>\n\n    @allure.title('После оформления заказа его номер появляется в разделе В работе')\n    def test_new_order_appears_in_processing_orders(self, app, user_data):\n        app.base.open('/login')\n        app.login_page.login(user_data.EMAIL, user_data.PASSWORD)\n        app.base.wait_for_main_page_header_loaded()\n        app.base.make_order()\n>       order_id = app.base.get_order_id_when_created()\n\ntest/test_feed_order.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/base_page.py:92: in get_order_id_when_created\n    return self.app.wd.find_element(IndexPageLocator.ORDER_ID_XPATH).text\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1024b95b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...0001891fe034 _pthread_start + 136\\\\n16  libsystem_pthread.dylib             0x00000001891f8e3c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=122.0.6261.112)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010047c508 chromedriver + 3966216\nE       1   chromedriver                        0x0000000100474a94 chromedriver + 3934868\nE       2   chromedriver                        0x00000001000f7da0 chromedriver + 277920\nE       3   chromedriver                        0x0000000100139fa8 chromedriver + 548776\nE       4   chromedriver                        0x0000000100172bf0 chromedriver + 781296\nE       5   chromedriver                        0x000000010012efb0 chromedriver + 503728\nE       6   chromedriver                        0x000000010012fa28 chromedriver + 506408\nE       7   chromedriver                        0x00000001004416f0 chromedriver + 3725040\nE       8   chromedriver                        0x0000000100445be4 chromedriver + 3742692\nE       9   chromedriver                        0x000000010042a1d8 chromedriver + 3629528\nE       10  chromedriver                        0x00000001004466e0 chromedriver + 3745504\nE       11  chromedriver                        0x000000010041d550 chromedriver + 3577168\nE       12  chromedriver                        0x0000000100464f40 chromedriver + 3870528\nE       13  chromedriver                        0x00000001004650e4 chromedriver + 3870948\nE       14  chromedriver                        0x0000000100474704 chromedriver + 3933956\nE       15  libsystem_pthread.dylib             0x00000001891fe034 _pthread_start + 136\nE       16  libsystem_pthread.dylib             0x00000001891f8e3c thread_start + 8\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException"}, "steps": [{"name": "Открытие страницы", "status": "passed", "parameters": [{"name": "url", "value": "'/login'"}], "start": 1709995375052, "stop": 1709995376235}, {"name": "переход по клику на «Личный кабинет»", "status": "passed", "steps": [{"name": "Ввод текста", "status": "passed", "parameters": [{"name": "text", "value": "'kov290583@ya.ru'"}, {"name": "locator", "value": "('xpath', \"//input[@name='name']\")"}], "start": 1709995376235, "stop": 1709995376320}, {"name": "Ввод текста", "status": "passed", "parameters": [{"name": "text", "value": "'121212'"}, {"name": "locator", "value": "('xpath', \"//input[@name='Пароль']\")"}], "start": 1709995376320, "stop": 1709995376347}, {"name": "Кликаем по кнопке", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \"//button[text()='Войти']\")"}], "start": 1709995376347, "stop": 1709995376373}], "parameters": [{"name": "name", "value": "'kov290583@ya.ru'"}, {"name": "password", "value": "'121212'"}], "start": 1709995376235, "stop": 1709995376373}, {"name": "Ждем загрузки заголовка главной страницы проекта", "status": "passed", "steps": [{"name": "Ждем загрузки заголовка страницы", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \"//h1[text()='Соберите бургер']\")"}], "start": 1709995376373, "stop": 1709995376611}], "start": 1709995376373, "stop": 1709995376611}, {"name": "Создаем заказ", "status": "passed", "steps": [{"name": "Перетаскиваем первый ингредиент в корзину", "status": "passed", "steps": [{"name": "Драг-н-дроп элемента на элемент", "status": "passed", "parameters": [{"name": "source", "value": "('xpath', \"//a[contains(@class, 'BurgerIngredient_ingredient_')][1]\")"}, {"name": "target", "value": "('xpath', \"//section[contains(@class, 'BurgerConstructor_basket')]\")"}], "start": 1709995376611, "stop": 1709995377170}], "start": 1709995376611, "stop": 1709995377170}, {"name": "Кликаем Оформить заказ", "status": "passed", "steps": [{"name": "Кликаем по кнопке", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \"//button[text()='Оформить заказ']\")"}], "start": 1709995377170, "stop": 1709995377199}], "start": 1709995377170, "stop": 1709995377199}], "start": 1709995376611, "stop": 1709995377200}, {"name": "Получаем значение ID заказа при его оформлении", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=122.0.6261.112)\nStacktrace:\n0   chromedriver                        0x000000010047c508 chromedriver + 3966216\n1   chromedriver                        0x0000000100474a94 chromedriver + 3934868\n2   chromedriver                        0x00000001000f7da0 chromedriver + 277920\n3   chromedriver                        0x0000000100139fa8 chromedriver + 548776\n4   chromedriver                        0x0000000100172bf0 chromedriver + 781296\n5   chromedriver                        0x000000010012efb0 chromedriver + 503728\n6   chromedriver                        0x000000010012fa28 chromedriver + 506408\n7   chromedriver                        0x00000001004416f0 chromedriver + 3725040\n8   chromedriver                        0x0000000100445be4 chromedriver + 3742692\n9   chromedriver                        0x000000010042a1d8 chromedriver + 3629528\n10  chromedriver                        0x00000001004466e0 chromedriver + 3745504\n11  chromedriver                        0x000000010041d550 chromedriver + 3577168\n12  chromedriver                        0x0000000100464f40 chromedriver + 3870528\n13  chromedriver                        0x00000001004650e4 chromedriver + 3870948\n14  chromedriver                        0x0000000100474704 chromedriver + 3933956\n15  libsystem_pthread.dylib             0x00000001891fe034 _pthread_start + 136\n16  libsystem_pthread.dylib             0x00000001891f8e3c thread_start + 8\n\n", "trace": "  File \"/Users/oleg/Documents/Practicum/Diplom/Diplom_3/.venv/lib/python3.9/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/oleg/Documents/Practicum/Diplom/Diplom_3/pages/base_page.py\", line 92, in get_order_id_when_created\n    return self.app.wd.find_element(IndexPageLocator.ORDER_ID_XPATH).text\n  File \"/Users/oleg/Documents/Practicum/Diplom/Diplom_3/.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 742, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"/Users/oleg/Documents/Practicum/Diplom/Diplom_3/.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/oleg/Documents/Practicum/Diplom/Diplom_3/.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Ждем исчезновения элемента из DOMа", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \"//h2[text()='9999']\")"}], "start": 1709995377200, "stop": 1709995377210}], "start": 1709995377200, "stop": 1709995377212}], "parameters": [{"name": "app", "value": "'chrome'"}], "start": 1709995375052, "stop": 1709995377212, "uuid": "9c400350-af2c-47d5-b61f-417b7b7e4621", "historyId": "4b6a6dea4e608ecbb88cd5145dc535aa", "testCaseId": "90e8dd5ad1f3c1629c28339acec46d10", "fullName": "test.test_feed_order.TestFeedOrder#test_new_order_appears_in_processing_orders", "labels": [{"name": "epic", "value": "Раздел «Лента заказов»"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_feed_order"}, {"name": "subSuite", "value": "TestFeedOrder"}, {"name": "host", "value": "MacBook-Pro-Oleg.local"}, {"name": "thread", "value": "19478-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_feed_order"}]}